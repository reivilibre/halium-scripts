#!/bin/sh
#
#  Copyright (c) 2014 Canonical
#
#  Author: Oliver Grawert <ogra@canonical.com>
#  Adapted by: Olivier 'Reivilibre' <olivier@librepush.net> for systems where loop mounting is unavailable/bugged(?)
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 of the
#  License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
#  USA
#

set -e

TARPATH=`realpath "$1"`
SYSIMG=`realpath "$2"`

check_prereq()
{
	if [ ! $(which make_ext4fs) ] || [ ! -x $(which simg2img) ] || \
		[ ! -x $(which adb) ]; then
		echo "please install the android-tools-fsutils and android-tools-adb packages" && exit 1
	fi
}

do_shell()
{
	adb shell "$@"
}

convert_android_img()
{
	if file $SYSIMG | grep -v ": Linux rev 1.0 ext4" >/dev/null; then
		# image is not ext4 filesystem; convert it
		simg2img $SYSIMG $WORKDIR/system.img.raw
		mkdir $TMPMOUNT
		mount -t ext4 -o loop $WORKDIR/system.img.raw $TMPMOUNT
		make_ext4fs -l 160M $WORKDIR/system.img $TMPMOUNT
		umount $TMPMOUNT
		rmdir $TMPMOUNT
		SYSIMAGE=$WORKDIR/system.img
	else
		SYSIMAGE=$SYSIMG
	fi
}

check_mounts(){
	MOUNTS=$(do_shell "cat /proc/mounts")
	if ! echo $MOUNTS | grep -qs '/data'; then
		do_shell "mount /data"
	fi
}


prepare_halium_rootfs()
{
	# reivilibre: do not do processing on target device
	#do_shell "rm -f /data/rootfs.img"
	#do_shell "dd if=/dev/zero of=/data/rootfs.img seek=500K bs=4096 count=0"
	#do_shell "mkfs.ext2 -F /data/rootfs.img"
	#do_shell "mkdir -p /cache/system"
	#do_shell "mount -o loop /data/rootfs.img /cache/system/"
	dd if=/dev/zero of=$WORKDIR/rootfs.img seek=500K bs=4096 count=0
	mkfs.ext2 -F $WORKDIR/rootfs.img
	mkdir -p $WORKDIR/mnt-rootfs
	mount -o loop $WORKDIR/rootfs.img $WORKDIR/mnt-rootfs
}

cleanup()
{
	
	cat <<EOF
*****************************************
* 3/3                                   *
*        Clean-up of host system        *
*                                       *
*****************************************
EOF
	
	if [ -d $WORKDIR/mnt-rootfs ]; then
		umount $WORKDIR/mnt-rootfs || echo "Failed to unmount $WORKDIR/mnt-rootfs. Clean-up will probably fail."
	fi
	echo
	echo "cleaning up"
	rm -rf $WORKDIR
	echo
}

# device clean-up is not required
#cleanup_device()
#{
	#[ -e $WORKDIR/device-clean ] && return
	#do_shell "umount /cache/system/ && rm -rf /cache/system"
	#do_shell "rm -f /recovery/$TARBALL"
	#[ -e $WORKDIR ] && touch $WORKDIR/device-clean 2>/dev/null || true
#}

trap cleanup 0 1 2 3 9 15

usage()
{
	echo "usage: $(basename $0) <path to rootfs tarball> <path to android system.img> [options]
	options:
	-h|--help		this message"
	exit 1
}

SUDOARGS="$@"

while [ $# -gt 0 ]; do
	case "$1" in
		-h|--help)
			usage
			;;
	esac
	shift
done

if [ -z "$TARPATH" ]; then
    echo "need valid rootfs tarball path"
    usage
fi

TARBALL=$(basename $TARPATH)

if [ -z "$TARBALL" ]; then
    echo "need valid rootfs tarball path"
    usage
fi

TARTYPE=$(file --mime-type $TARPATH|sed 's/^.* //')
case ${TARTYPE#application\/} in
    gzip|x-gzip)
	;;
    *)
	echo "Need valid rootfs tarball gzip type"
	usage
	;;
esac

if [ -z "$SYSIMG" ] || \
	[ "$(file --mime-type $SYSIMG|sed 's/^.* //')" != "application/octet-stream" ]; then
	echo "need valid system.img path and type application/octet-stream"
	usage
fi

[ $(id -u) -ne 0 ] && exec sudo $0 $SUDOARGS

check_prereq

if ! adb devices | grep -q recovery; then
	echo "please make sure the device is attached via USB in recovery mode"
	exit 1
fi

check_mounts

WORKDIR=$(mktemp -d /tmp/halium-install.XXXXX)
TMPMOUNT="$WORKDIR/tmpmount"

ANDROID_DIR="/data"


### rootfs.img preparation

cat <<EOF
*****************************************
* 1/3                                   *
*       Preparation of rootfs.img       *
*                                       *
*****************************************
EOF

echo -n "preparing rootfs image on host ... "
prepare_halium_rootfs
echo "[done]"

echo -n "unpacking rootfs tarball to rootfs image ... "
( cd $WORKDIR/mnt-rootfs && tar zxf $TARPATH )
echo "[done]"

echo -n "unmounting rootfs image ... "
sync
umount $WORKDIR/mnt-rootfs
rmdir $WORKDIR/mnt-rootfs
sync
echo "[done]"


### installation to android device

cat <<EOF
*****************************************
* 2/3                                   *
*     Installation to Android Device    *
*                                       *
*****************************************
EOF

echo -n "adding rootfs image to installation ... "
adb push $WORKDIR/rootfs.img $ANDROID_DIR/rootfs.img
echo "[done]"

echo -n "adding android system image to installation ... "
convert_android_img
adb push $SYSIMAGE $ANDROID_DIR/system.img
echo "[done]"


### conclusion

echo "All done! Now you can use 'adb shell' to get a shell to the recovery, or"
echo "simply reboot your device to start Halium."
